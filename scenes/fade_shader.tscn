[gd_scene load_steps=22 format=2]

[ext_resource path="res://scripts/omni_light.gd" type="Script" id=1]
[ext_resource path="res://tres/fade_noise.tres" type="Texture" id=2]
[ext_resource path="res://scripts/fade_shader.gd" type="Script" id=4]

[sub_resource type="PlaneMesh" id=1]
subdivide_width = 16
subdivide_depth = 16

[sub_resource type="SpatialMaterial" id=2]
albedo_color = Color( 0.494118, 0.709804, 0.705882, 1 )

[sub_resource type="SphereMesh" id=3]

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "alpha"

[sub_resource type="VisualShaderNodeScalarSwitch" id=5]
default_input_values = [ 0, true, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 2.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
output_port_for_preview = 0
constant = 3.14

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeInput" id=10]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
output_port_for_preview = 0
function = 1

[sub_resource type="VisualShaderNodeTexture" id=12]
output_port_for_preview = 0
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarOp" id=13]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=14]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 1

[sub_resource type="VisualShaderNodeBooleanUniform" id=15]
uniform_name = "die"

[sub_resource type="VisualShader" id=16]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, cull_disabled, diffuse_burley, specular_schlick_ggx, ensure_correct_normals;

uniform bool die;
uniform sampler2D tex_frg_6;
uniform float time;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:9
	bool n_out9p0 = die;

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Texture:6
	vec4 tex_frg_6_read = texture(tex_frg_6, n_out3p0.xy);
	vec3 n_out6p0 = tex_frg_6_read.rgb;
	float n_out6p1 = tex_frg_6_read.a;

// ScalarUniform:13
	float n_out13p0 = time;

// ScalarFunc:5
	float n_out5p0 = cos(n_out13p0);

// ScalarOp:7
	float n_in7p1 = 2.00000;
	float n_out7p0 = n_out5p0 / n_in7p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out6p0, vec3(0.333333, 0.333333, 0.333333)) - n_out7p0;

// ScalarOp:12
	float n_in12p0 = 1.00000;
	float n_out12p0 = n_in12p0 - n_out8p0;

// ScalarFunc:2
	float n_out2p0 = round(n_out12p0);

// Input:10
	float n_out10p0 = COLOR.a;

// ScalarSwitch:11
	float n_out11p0;
	if(n_out9p0)
	{
		n_out11p0 = n_out2p0;
	}
	else
	{
		n_out11p0 = n_out10p0;
	}

// Output:0
	ALPHA = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1822.11, 488.5 )
modes/cull = 2
modes/depth_draw = 3
modes/diffuse = 3
flags/ensure_correct_normals = true
nodes/fragment/0/position = Vector2( 120, 80 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( -240, 380 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( -1320, 220 )
nodes/fragment/5/node = SubResource( 11 )
nodes/fragment/5/position = Vector2( -1160, 540 )
nodes/fragment/6/node = SubResource( 12 )
nodes/fragment/6/position = Vector2( -1020, 140 )
nodes/fragment/7/node = SubResource( 13 )
nodes/fragment/7/position = Vector2( -900, 520 )
nodes/fragment/8/node = SubResource( 14 )
nodes/fragment/8/position = Vector2( -700, 280 )
nodes/fragment/9/node = SubResource( 15 )
nodes/fragment/9/position = Vector2( -760, 0 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( -760, 80 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( -100, 40 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( -480, 480 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( -1420, 520 )
nodes/fragment/14/node = SubResource( 8 )
nodes/fragment/14/position = Vector2( -1420, 660 )
nodes/fragment/connections = PoolIntArray( 3, 0, 6, 0, 6, 0, 8, 0, 11, 0, 0, 1, 10, 0, 11, 2, 9, 0, 11, 0, 8, 0, 12, 1, 5, 0, 7, 0, 7, 0, 8, 1, 12, 0, 2, 0, 2, 0, 11, 1, 13, 0, 5, 0 )

[sub_resource type="ShaderMaterial" id=17]
render_priority = 1
shader = SubResource( 16 )
shader_param/die = false
shader_param/time = null

[sub_resource type="Animation" id=18]
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("OmniLight:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.5, 1, 1.5, 2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( -3.79108, 3.34462, 0 ), Vector3( 2.2952, 3.34462, 0 ), Vector3( 3.791, 3.345, 0 ), Vector3( 2.295, 3.345, 0 ) ]
}

[node name="Spatial" type="Spatial"]
script = ExtResource( 4 )

[node name="Plane" type="CSGMesh" parent="."]
transform = Transform( 14.601, 0, 0, 0, 14.601, 0, 0, 0, 14.601, -0.0989406, -0.191855, 0.115399 )
mesh = SubResource( 1 )
material = SubResource( 2 )

[node name="Sphere" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.790122, 0 )
mesh = SubResource( 3 )
material/0 = SubResource( 17 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.992185, 0.0349084, -0.119796, 0, 0.96007, 0.279762, 0.124779, -0.277575, 0.952566, -0.833092, 2.45613, 3.43473 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.584773, -0.549095, 0.597106, 0.0625889, 0.764426, 0.641666, -0.808779, -0.337857, 0.481383, 3.28619, 5.16839, 6.04785 )
light_energy = 0.78
shadow_enabled = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
"anims/luz moviendose" = SubResource( 18 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.295, 3.345, 0 )
shadow_enabled = true
omni_range = 10.5711
script = ExtResource( 1 )
